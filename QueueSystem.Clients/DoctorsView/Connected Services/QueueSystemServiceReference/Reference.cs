//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoctorsView.QueueSystemServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="QueueSystem.Contract", ConfigurationName="QueueSystemServiceReference.Contract", CallbackContract=typeof(DoctorsView.QueueSystemServiceReference.ContractCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface Contract {
        
        [System.ServiceModel.OperationContractAttribute(Action="QueueSystem.Contract/Contract/Connect", ReplyAction="QueueSystem.Contract/Contract/ConnectResponse")]
        int Connect(int userId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="QueueSystem.Contract/Contract/Connect", ReplyAction="QueueSystem.Contract/Contract/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(int userId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="QueueSystem.Contract/Contract/ReceiveQueueNo")]
        void ReceiveQueueNo(int userId, int queueNo, string userInitials);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="QueueSystem.Contract/Contract/ReceiveQueueNo")]
        System.Threading.Tasks.Task ReceiveQueueNoAsync(int userId, int queueNo, string userInitials);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="QueueSystem.Contract/Contract/ReceiveAdditionalMessage")]
        void ReceiveAdditionalMessage(int userId, string additionalMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="QueueSystem.Contract/Contract/ReceiveAdditionalMessage")]
        System.Threading.Tasks.Task ReceiveAdditionalMessageAsync(int userId, string additionalMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="QueueSystem.Contract/Contract/Disconnect", ReplyAction="QueueSystem.Contract/Contract/DisconnectResponse")]
        int Disconnect(int userId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="QueueSystem.Contract/Contract/Disconnect", ReplyAction="QueueSystem.Contract/Contract/DisconnectResponse")]
        System.Threading.Tasks.Task<int> DisconnectAsync(int userId, string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ContractCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="QueueSystem.Contract/Contract/NotifyOfEstablishedConnection")]
        void NotifyOfEstablishedConnection(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="QueueSystem.Contract/Contract/NotifyOfReceivedQueueNo")]
        void NotifyOfReceivedQueueNo(string queueNo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="QueueSystem.Contract/Contract/NotifyOfReceivedAdditionalMessage")]
        void NotifyOfReceivedAdditionalMessage(string additionalMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="QueueSystem.Contract/Contract/NotifyClientDisconnected")]
        void NotifyClientDisconnected(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ContractChannel : DoctorsView.QueueSystemServiceReference.Contract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractClient : System.ServiceModel.DuplexClientBase<DoctorsView.QueueSystemServiceReference.Contract>, DoctorsView.QueueSystemServiceReference.Contract {
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(int userId, string userName) {
            return base.Channel.Connect(userId, userName);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(int userId, string userName) {
            return base.Channel.ConnectAsync(userId, userName);
        }
        
        public void ReceiveQueueNo(int userId, int queueNo, string userInitials) {
            base.Channel.ReceiveQueueNo(userId, queueNo, userInitials);
        }
        
        public System.Threading.Tasks.Task ReceiveQueueNoAsync(int userId, int queueNo, string userInitials) {
            return base.Channel.ReceiveQueueNoAsync(userId, queueNo, userInitials);
        }
        
        public void ReceiveAdditionalMessage(int userId, string additionalMessage) {
            base.Channel.ReceiveAdditionalMessage(userId, additionalMessage);
        }
        
        public System.Threading.Tasks.Task ReceiveAdditionalMessageAsync(int userId, string additionalMessage) {
            return base.Channel.ReceiveAdditionalMessageAsync(userId, additionalMessage);
        }
        
        public int Disconnect(int userId, string userName) {
            return base.Channel.Disconnect(userId, userName);
        }
        
        public System.Threading.Tasks.Task<int> DisconnectAsync(int userId, string userName) {
            return base.Channel.DisconnectAsync(userId, userName);
        }
    }
}
